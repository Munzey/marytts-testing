apply plugin: 'java'
apply plugin: 'eclipse'

buildscript {
    def areas = ['de', 'en', 'fr', 'it', 'ru', 'sv', 'te', 'tr']    
    def maryttsVersion='5.1.1'
    repositories {
        jcenter()
        maven {
           url 'https://oss.jfrog.org/artifactory/repo'
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'de.dfki.mary', name: 'marytts-runtime', version: maryttsVersion
        areas.each { locale ->
            classpath group: 'de.dfki.mary', name: "marytts-lang-$locale", version: maryttsVersion
        }
        classpath group: 'de.dfki.mary', name: 'voice-cmu-slt-hsmm', version: maryttsVersion
    }
}

def areas = ['de', 'en', 'fr', 'it', 'ru', 'sv', 'te', 'tr']

import marytts.LocalMaryInterface;
import marytts.datatypes.MaryDataType;
import marytts.util.data.audio.MaryAudioUtils;
import marytts.util.dom.DomUtils

import groovy.xml.*
import groovy.util.slurpersupport.*

import javax.sound.sampled.AudioInputStream;

def mary = new LocalMaryInterface()

def cur_area = "en"

/***
 * TODO
 * wikidump links: https://dumps.wikimedia.org/backup-index-bydb.html
 * need task to download dumps, these could be useful:
 * https://github.com/bwbaugh/wikipedia-extractor, original: https://github.com/attardi/wikiextractor, site: http://medialab.di.unipi.it/wiki/Wikipedia_Extractor
 * https://www.mediawiki.org/wiki/Manual:MWDumper
 * steps 3 & 4 from here: http://www.evanjones.ca/software/wikipedia2text.html
 *
 *  another factor to consider is size of dumps? enwiki is usually 10GB+, perhaps take enwikisource instead? 1-2GB for english, sig. less for others
 *  Two ideas:
 *   1. download xywikisource instead of wiki
 *   2. using MWDumper, we first get a list of "good articles" and filter the dump
 *
 ***/

task splitWiki() {
	def pre_dir = file("$project.projectDir/data/text/$cur_area/pre")
	def pageFiles = []
    outputs.files fileTree(pre_dir).include('**/*.txt').files.sort()
	doLast {
        pre_dir.mkdirs()
		// get XML from file
        def inputXmlStr = new File("$project.projectDir/res.xml").text
        def xml = new XmlSlurper(false, false).parseText inputXmlStr
		
		// process XML
        xml.depthFirst().findAll { it.name() == 'page' }.each { page ->
        	if (!page.revision.text.text().startsWith("#REDIRECT")) {
        		pageFiles << page.revision.text.text()
        	}
        }
        
        //write pre-processed pages to files
        pageFiles.eachWithIndex { page, idx ->
        	new File(pre_dir, "page_${idx + 1}.txt").withWriter{ it << page }
        }    	
	}
}

task wikiToText() {
    def post_dir = file("$project.projectDir/data/text/$cur_area/post")
	inputs.files splitWiki.getOutputs().getFiles()
    outputs.files fileTree(post_dir).include('**/*.txt').files.sort()
    doLast { 
        Wiki2Text w = new Wiki2Text(cur_area, "./data/text");    
        inputs.files.each {File page ->
        	w.getCleanText(page.text);
        }
    }
}


task textToAcoustParams() {
    inputs.files wikiToText.getOutputs().getFiles()
    def acparam_dir = new File("$project.projectDir/data/acoust_params/$cur_area")
    outputs.files fileTree(acparam_dir).include('**/*.xml').files.sort()

    doLast {
        acparam_dir.mkdirs()
        mary.setInputType("TEXT")
        mary.setOutputType("ACOUSTPARAMS")
        
        inputs.files.each { file ->
            def basename = file.name.replaceAll("\\.txt\$", "")
            def d = mary.generateXML(file.text)
            //convert from doc -> xml -> string
            def inputXmlStr = DomUtils.serializeToString d
            def xml = new XmlSlurper(false, false).parseText inputXmlStr
            def outputXmlStr = new StreamingMarkupBuilder().bind { mkp.yield xml }.toString()
            
            new File("$acparam_dir/${basename}.xml").text = outputXmlStr
        }
        
    }
}

task acoustParamsToWav(){
    inputs.files textToAcoustParams.getOutputs().getFiles()
    def wav_dir = new File("$project.projectDir/data/acoust_params/$cur_area")

    doLast {
        wav_dir.mkdirs()
        // Actual fantasy synthesis
        mary.setInputType("ACOUSTPARAMS")
        mary.setOutputType("AUDIO")

        inputs.files.each { file ->
            def basename = file.name.replaceAll("\\.xml\$", "")
            logger.quiet("Synthesis $file.name ......")
            def xml = file.text
            AudioInputStream audio = mary.generateAudio(xml);
            
            // MaryAudioUtils.writeWavFile(MaryAudioUtils.getSamplesAsDoubleArray(audio),
            //                             "$wav_dir/${basename}.wav",
            //                             audio.getFormat());
        }
    }
}

task run(dependsOn:acoustParamsToWav) {
}
